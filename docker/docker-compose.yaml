services:
  # API service
  api:
    image: langgenius/dify-api:0.15.3
    restart: always
    environment:
      MODE: api
    env_file:
      - stack.env
    depends_on:
      - db
      - redis
    volumes:
      # Mount the storage directory to the container, for storing user files.
      - ./volumes/app/storage:/app/api/storage
    networks:
      - ssrf_proxy_network
      - default

  # worker service
  # The Celery worker for processing the queue.
  worker:
    image: langgenius/dify-api:0.15.3
    restart: always
    environment:
      MODE: worker
      SENTRY_DSN: $API_SENTRY_DSN
      SENTRY_TRACES_SAMPLE_RATE: $API_SENTRY_TRACES_SAMPLE_RATE
      SENTRY_PROFILES_SAMPLE_RATE: $API_SENTRY_PROFILES_SAMPLE_RATE
    env_file:
      - stack.env
    depends_on:
      - db
      - redis
    volumes:
      # Mount the storage directory to the container, for storing user files.
      - ./volumes/app/storage:/app/api/storage
    networks:
      - ssrf_proxy_network
      - default

  # Frontend web application.
  web:
    image: langgenius/dify-web:0.15.3
    restart: always
    environment:
      CONSOLE_API_URL: $CONSOLE_API_URL
      APP_API_URL: $APP_API_URL
      SENTRY_DSN: $WEB_SENTRY_DSN
      NEXT_TELEMETRY_DISABLED: $NEXT_TELEMETRY_DISABLED
      TEXT_GENERATION_TIMEOUT_MS: $TEXT_GENERATION_TIMEOUT_MS
      CSP_WHITELIST: $CSP_WHITELIST
      TOP_K_MAX_VALUE: $TOP_K_MAX_VALUE
      INDEXING_MAX_SEGMENTATION_TOKENS_LENGTH: $INDEXING_MAX_SEGMENTATION_TOKENS_LENGTH

  # The postgres database.
  db:
    image: postgres:15-alpine
    restart: always
    environment:
      PGUSER: postgres
      POSTGRES_PASSWORD: difyai123456
      POSTGRES_DB: dify
      PGDATA: $PGDATA
    command: >
      postgres -c 'max_connections=$POSTGRES_MAX_CONNECTIONS'
               -c 'shared_buffers=$POSTGRES_SHARED_BUFFERS:-128MB'
               -c 'work_mem=$POSTGRES_WORK_MEM'
               -c 'maintenance_work_mem=$POSTGRES_MAINTENANCE_WORK_MEM'
               -c 'effective_cache_size=$POSTGRES_EFFECTIVE_CACHE_SIZE'
    volumes:
      - ./volumes/db/data:/var/lib/postgresql/data
    healthcheck:
      test: [ 'CMD', 'pg_isready' ]
      interval: 1s
      timeout: 3s
      retries: 30

  # The redis cache.
  redis:
    image: redis:6-alpine
    restart: always
    environment:
      REDISCLI_AUTH: $REDIS_PASSWORD
    volumes:
      # Mount the redis data directory to the container.
      - ./volumes/redis/data:/data
    # Set the redis password when startup redis server.
    command: redis-server --requirepass $REDIS_PASSWORD
    healthcheck:
      test: [ 'CMD', 'redis-cli', 'ping' ]

  # The DifySandbox
  sandbox:
    image: langgenius/dify-sandbox:0.2.10
    restart: always
    environment:
      # The DifySandbox configurations
      # Make sure you are changing this key for your deployment with a strong key.
      # You can generate a strong key using `openssl rand -base64 42`.
      API_KEY: $SANDBOX_API_KEY
      GIN_MODE: $SANDBOX_GIN_MODE
      WORKER_TIMEOUT: $SANDBOX_WORKER_TIMEOUT
      ENABLE_NETWORK: $SANDBOX_ENABLE_NETWORK
      HTTP_PROXY: $SANDBOX_HTTP_PROXY
      HTTPS_PROXY: $SANDBOX_HTTPS_PROXY
      SANDBOX_PORT: $SANDBOX_PORT
    volumes:
      - ./volumes/sandbox/dependencies:/dependencies
    healthcheck:
      test: [ 'CMD', 'curl', '-f', 'http://localhost:8194/health' ]
    networks:
      - ssrf_proxy_network

  # ssrf_proxy server
  # for more information, please refer to
  # https://docs.dify.ai/learn-more/faq/install-faq#id-18.-why-is-ssrf_proxy-needed
  ssrf_proxy:
    image: ubuntu/squid:latest
    restart: always
    volumes:
      - ./ssrf_proxy/squid.conf.template:/etc/squid/squid.conf.template
      - ./ssrf_proxy/docker-entrypoint.sh:/docker-entrypoint-mount.sh
    entrypoint: [ 'sh', '-c', "cp /docker-entrypoint-mount.sh /docker-entrypoint.sh && sed -i 's/\r$$//' /docker-entrypoint.sh && chmod +x /docker-entrypoint.sh && /docker-entrypoint.sh" ]
    environment:
      # pls clearly modify the squid env vars to fit your network environment.
      HTTP_PORT: $SSRF_HTTP_PORT
      COREDUMP_DIR: $SSRF_COREDUMP_DIR
      REVERSE_PROXY_PORT: $SSRF_REVERSE_PROXY_PORT
      SANDBOX_HOST: $SSRF_SANDBOX_HOST
      SANDBOX_PORT: $SANDBOX_PORT
    networks:
      - ssrf_proxy_network
      - default

  # Certbot service
  # use `docker-compose --profile certbot up` to start the certbot service.
  certbot:
    image: certbot/certbot
    profiles:
      - certbot
    volumes:
      - ./volumes/certbot/conf:/etc/letsencrypt
      - ./volumes/certbot/www:/var/www/html
      - ./volumes/certbot/logs:/var/log/letsencrypt
      - ./volumes/certbot/conf/live:/etc/letsencrypt/live
      - ./certbot/update-cert.template.txt:/update-cert.template.txt
      - ./certbot/docker-entrypoint.sh:/docker-entrypoint.sh
    environment:
      - CERTBOT_EMAIL=$CERTBOT_EMAIL
      - CERTBOT_DOMAIN=$CERTBOT_DOMAIN
      - CERTBOT_OPTIONS=$CERTBOT_OPTIONS
    entrypoint: [ '/docker-entrypoint.sh' ]
    command: [ 'tail', '-f', '/dev/null' ]

  # The nginx reverse proxy.
  # used for reverse proxying the API service and Web service.
  nginx:
    image: nginx:latest
    restart: always
    volumes:
      - ./nginx/nginx.conf.template:/etc/nginx/nginx.conf.template
      - ./nginx/proxy.conf.template:/etc/nginx/proxy.conf.template
      - ./nginx/https.conf.template:/etc/nginx/https.conf.template
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./nginx/docker-entrypoint.sh:/docker-entrypoint-mount.sh
      - ./nginx/ssl:/etc/ssl # cert dir (legacy)
      - ./volumes/certbot/conf/live:/etc/letsencrypt/live # cert dir (with certbot container)
      - ./volumes/certbot/conf:/etc/letsencrypt
      - ./volumes/certbot/www:/var/www/html
    entrypoint: [ 'sh', '-c', "cp /docker-entrypoint-mount.sh /docker-entrypoint.sh && sed -i 's/\r$$//' /docker-entrypoint.sh && chmod +x /docker-entrypoint.sh && /docker-entrypoint.sh" ]
    environment:
      NGINX_SERVER_NAME: $NGINX_SERVER_NAME
      NGINX_HTTPS_ENABLED: $NGINX_HTTPS_ENABLED
      NGINX_SSL_PORT: $NGINX_SSL_PORT
      NGINX_PORT: $NGINX_PORT
      # You're required to add your own SSL certificates/keys to the `./nginx/ssl` directory
      # and modify the env vars below in .env if HTTPS_ENABLED is true.
      NGINX_SSL_CERT_FILENAME: $NGINX_SSL_CERT_FILENAME
      NGINX_SSL_CERT_KEY_FILENAME: ${NGINX_SSL_CERT_KEY_FILENAME
      NGINX_SSL_PROTOCOLS: $NGINX_SSL_PROTOCOLS
      NGINX_WORKER_PROCESSES: $NGINX_WORKER_PROCESSES
      NGINX_CLIENT_MAX_BODY_SIZE: $NGINX_CLIENT_MAX_BODY_SIZE
      NGINX_KEEPALIVE_TIMEOUT: $NGINX_KEEPALIVE_TIMEOUT
      NGINX_PROXY_READ_TIMEOUT: $NGINX_PROXY_READ_TIMEOUT
      NGINX_PROXY_SEND_TIMEOUT: $NGINX_PROXY_SEND_TIMEOUT
      NGINX_ENABLE_CERTBOT_CHALLENGE: $NGINX_ENABLE_CERTBOT_CHALLENGE
      CERTBOT_DOMAIN: $CERTBOT_DOMAIN
    depends_on:
      - api
      - web
    ports:
      - '$EXPOSE_NGINX_PORT:$NGINX_PORT'
      - '$EXPOSE_NGINX_SSL_PORT:$NGINX_SSL_PORT'

  # The Weaviate vector store.
  weaviate:
    image: semitechnologies/weaviate:1.19.0
    profiles:
      - ''
      - weaviate
    restart: always
    volumes:
      # Mount the Weaviate data directory to the con tainer.
      - ./volumes/weaviate:/var/lib/weaviate
    environment:
      # The Weaviate configurations
      # You can refer to the [Weaviate](https://weaviate.io/developers/weaviate/config-refs/env-vars) documentation for more information.
      PERSISTENCE_DATA_PATH: $WEAVIATE_PERSISTENCE_DATA_PATH
      QUERY_DEFAULTS_LIMIT: $WEAVIATE_QUERY_DEFAULTS_LIMIT
      AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED: $WEAVIATE_AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED
      DEFAULT_VECTORIZER_MODULE: $WEAVIATE_DEFAULT_VECTORIZER_MODULE
      CLUSTER_HOSTNAME: $WEAVIATE_CLUSTER_HOSTNAME
      AUTHENTICATION_APIKEY_ENABLED: $WEAVIATE_AUTHENTICATION_APIKEY_ENABLED
      AUTHENTICATION_APIKEY_ALLOWED_KEYS: $WEAVIATE_AUTHENTICATION_APIKEY_ALLOWED_KEYS
      AUTHENTICATION_APIKEY_USERS: $WEAVIATE_AUTHENTICATION_APIKEY_USERS
      AUTHORIZATION_ADMINLIST_ENABLED: $WEAVIATE_AUTHORIZATION_ADMINLIST_ENABLED
      AUTHORIZATION_ADMINLIST_USERS: $WEAVIATE_AUTHORIZATION_ADMINLIST_USERS

  # Qdrant vector store.
  # (if used, you need to set VECTOR_STORE to qdrant in the api & worker service.)
  qdrant:
    image: langgenius/qdrant:v1.7.3
    profiles:
      - qdrant
    restart: always
    volumes:
      - ./volumes/qdrant:/qdrant/storage
    environment:
      QDRANT_API_KEY: $QDRANT_API_KEY

  # The Couchbase vector store.
  couchbase-server:
    build: ./couchbase-server
    profiles:
      - couchbase
    restart: always
    environment:
      - CLUSTER_NAME=dify_search
      - COUCHBASE_ADMINISTRATOR_USERNAME=$COUCHBASE_USER
      - COUCHBASE_ADMINISTRATOR_PASSWORD=$COUCHBASE_PASSWORD
      - COUCHBASE_BUCKET=$COUCHBASE_BUCKET_NAME
      - COUCHBASE_BUCKET_RAMSIZE=512
      - COUCHBASE_RAM_SIZE=2048
      - COUCHBASE_EVENTING_RAM_SIZE=512
      - COUCHBASE_INDEX_RAM_SIZE=512
      - COUCHBASE_FTS_RAM_SIZE=1024
    hostname: couchbase-server
    container_name: couchbase-server
    working_dir: /opt/couchbase
    stdin_open: true
    tty: true
    entrypoint: [ "" ]
    command: sh -c "/opt/couchbase/init/init-cbserver.sh"
    volumes:
      - ./volumes/couchbase/data:/opt/couchbase/var/lib/couchbase/data
    healthcheck:
      # ensure bucket was created before proceeding
      test: [ "CMD-SHELL", "curl -s -f -u Administrator:password http://localhost:8091/pools/default/buckets | grep -q '\\[{' || exit 1" ]
      interval: 10s
      retries: 10
      start_period: 30s
      timeout: 10s

  # The pgvector vector database.
  pgvector:
    image: pgvector/pgvector:pg16
    profiles:
      - pgvector
    restart: always
    environment:
      PGUSER: $PGVECTOR_PGUSER
      # The password for the default postgres user.
      POSTGRES_PASSWORD: $PGVECTOR_POSTGRES_PASSWORD
      # The name of the default postgres database.
      POSTGRES_DB: $PGVECTOR_POSTGRES_DB
      # postgres data directory
      PGDATA: $PGVECTOR_PGDATA
    volumes:
      - ./volumes/pgvector/data:/var/lib/postgresql/data
    healthcheck:
      test: [ 'CMD', 'pg_isready' ]
      interval: 1s
      timeout: 3s
      retries: 30

  # pgvecto-rs vector store
  pgvecto-rs:
    image: tensorchord/pgvecto-rs:pg16-v0.3.0
    profiles:
      - pgvecto-rs
    restart: always
    environment:
      PGUSER: $PGVECTOR_PGUSER
      # The password for the default postgres user.
      POSTGRES_PASSWORD: $PGVECTOR_POSTGRES_PASSWORD
      # The name of the default postgres database.
      POSTGRES_DB: $PGVECTOR_POSTGRES_DB:
      # postgres data directory
      PGDATA: $PGVECTOR_PGDATA
    volumes:
      - ./volumes/pgvecto_rs/data:/var/lib/postgresql/data
    healthcheck:
      test: [ 'CMD', 'pg_isready' ]
      interval: 1s
      timeout: 3s
      retries: 30

  # Chroma vector database
  chroma:
    image: ghcr.io/chroma-core/chroma:0.5.20
    profiles:
      - chroma
    restart: always
    volumes:
      - ./volumes/chroma:/chroma/chroma
    environment:
      CHROMA_SERVER_AUTHN_CREDENTIALS: $CHROMA_SERVER_AUTHN_CREDENTIALS
      CHROMA_SERVER_AUTHN_PROVIDER: $CHROMA_SERVER_AUTHN_PROVIDER
      IS_PERSISTENT: $CHROMA_IS_PERSISTENT

  # OceanBase vector database
  oceanbase:
    image: quay.io/oceanbase/oceanbase-ce:4.3.3.0-100000142024101215
    profiles:
      - oceanbase
    restart: always
    volumes:
      - ./volumes/oceanbase/data:/root/ob
      - ./volumes/oceanbase/conf:/root/.obd/cluster
      - ./volumes/oceanbase/init.d:/root/boot/init.d
    environment:
      OB_MEMORY_LIMIT: $OCEANBASE_MEMORY_LIMIT
      OB_SYS_PASSWORD: $OCEANBASE_VECTOR_PASSWORD
      OB_TENANT_PASSWORD: $OCEANBASE_VECTOR_PASSWORD
      OB_CLUSTER_NAME: $OCEANBASE_CLUSTER_NAME
      OB_SERVER_IP: '127.0.0.1'

  # Oracle vector database
  oracle:
    image: container-registry.oracle.com/database/free:latest
    profiles:
      - oracle
    restart: always
    volumes:
      - source: oradata
        type: volume
        target: /opt/oracle/oradata
      - ./startupscripts:/opt/oracle/scripts/startup
    environment:
      ORACLE_PWD: $ORACLE_PWD
      ORACLE_CHARACTERSET: $ORACLE_CHARACTERSET

  # Milvus vector database services
  etcd:
    container_name: milvus-etcd
    image: quay.io/coreos/etcd:v3.5.5
    profiles:
      - milvus
    environment:
      ETCD_AUTO_COMPACTION_MODE: $ETCD_AUTO_COMPACTION_MODE
      ETCD_AUTO_COMPACTION_RETENTION: $ETCD_AUTO_COMPACTION_RETENTION
      ETCD_QUOTA_BACKEND_BYTES: $ETCD_QUOTA_BACKEND_BYTES
      ETCD_SNAPSHOT_COUNT: $ETCD_SNAPSHOT_COUNT
    volumes:
      - ./volumes/milvus/etcd:/etcd
    command: etcd -advertise-client-urls=http://127.0.0.1:2379 -listen-client-urls http://0.0.0.0:2379 --data-dir /etcd
    healthcheck:
      test: [ 'CMD', 'etcdctl', 'endpoint', 'health' ]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - milvus

  minio:
    container_name: milvus-minio
    image: minio/minio:RELEASE.2023-03-20T20-16-18Z
    profiles:
      - milvus
    environment:
      MINIO_ACCESS_KEY: $MINIO_ACCESS_KEY
      MINIO_SECRET_KEY: $MINIO_SECRET_KEY
    volumes:
      - ./volumes/milvus/minio:/minio_data
    command: minio server /minio_data --console-address ":9001"
    healthcheck:
      test: [ 'CMD', 'curl', '-f', 'http://localhost:9000/minio/health/live' ]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - milvus

  milvus-standalone:
    container_name: milvus-standalone
    image: milvusdb/milvus:v2.5.0-beta
    profiles:
      - milvus
    command: [ 'milvus', 'run', 'standalone' ]
    environment:
      ETCD_ENDPOINTS: $ETCD_ENDPOINTS
      MINIO_ADDRESS: $MINIO_ADDRESS
      common.security.authorizationEnabled: $MILVUS_AUTHORIZATION_ENABLED
    volumes:
      - ./volumes/milvus/milvus:/var/lib/milvus
    healthcheck:
      test: [ 'CMD', 'curl', '-f', 'http://localhost:9091/healthz' ]
      interval: 30s
      start_period: 90s
      timeout: 20s
      retries: 3
    depends_on:
      - etcd
      - minio
    ports:
      - 19530:19530
      - 9091:9091
    networks:
      - milvus

  # Opensearch vector database
  opensearch:
    container_name: opensearch
    image: opensearchproject/opensearch:latest
    profiles:
      - opensearch
    environment:
      discovery.type: $OPENSEARCH_DISCOVERY_TYPE
      bootstrap.memory_lock: $OPENSEARCH_BOOTSTRAP_MEMORY_LOCK
      OPENSEARCH_JAVA_OPTS: -Xms$OPENSEARCH_JAVA_OPTS_MIN -Xmx$OPENSEARCH_JAVA_OPTS_MAX
      OPENSEARCH_INITIAL_ADMIN_PASSWORD: $OPENSEARCH_INITIAL_ADMIN_PASSWORD
    ulimits:
      memlock:
        soft: $OPENSEARCH_MEMLOCK_SOFT
        hard: $OPENSEARCH_MEMLOCK_HARD
      nofile:
        soft: $OPENSEARCH_NOFILE_SOFT
        hard: $OPENSEARCH_NOFILE_HARD
    volumes:
      - ./volumes/opensearch/data:/usr/share/opensearch/data
    networks:
      - opensearch-net

  opensearch-dashboards:
    container_name: opensearch-dashboards
    image: opensearchproject/opensearch-dashboards:latest
    profiles:
      - opensearch
    environment:
      OPENSEARCH_HOSTS: '["https://opensearch:9200"]'
    volumes:
      - ./volumes/opensearch/opensearch_dashboards.yml:/usr/share/opensearch-dashboards/config/opensearch_dashboards.yml
    networks:
      - opensearch-net
    depends_on:
      - opensearch

  # MyScale vector database
  myscale:
    container_name: myscale
    image: myscale/myscaledb:1.6.4
    profiles:
      - myscale
    restart: always
    tty: true
    volumes:
      - ./volumes/myscale/data:/var/lib/clickhouse
      - ./volumes/myscale/log:/var/log/clickhouse-server
      - ./volumes/myscale/config/users.d/custom_users_config.xml:/etc/clickhouse-server/users.d/custom_users_config.xml
    ports:
      - $MYSCALE_PORT:$MYSCALE_PORT

  # https://www.elastic.co/guide/en/elasticsearch/reference/current/settings.html
  # https://www.elastic.co/guide/en/elasticsearch/reference/current/docker.html#docker-prod-prerequisites
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.14.3
    container_name: elasticsearch
    profiles:
      - elasticsearch
      - elasticsearch-ja
    restart: always
    volumes:
      - ./elasticsearch/docker-entrypoint.sh:/docker-entrypoint-mount.sh
      - dify_es01_data:/usr/share/elasticsearch/data
    environment:
      ELASTIC_PASSWORD: $ELASTICSEARCH_PASSWORD
      VECTOR_STORE: $VECTOR_STORE
      cluster.name: dify-es-cluster
      node.name: dify-es0
      discovery.type: single-node
      xpack.license.self_generated.type: basic
      xpack.security.enabled: 'true'
      xpack.security.enrollment.enabled: 'false'
      xpack.security.http.ssl.enabled: 'false'
    ports:
      - $ELASTICSEARCH_PORT:9200
    deploy:
      resources:
        limits:
          memory: 2g
    entrypoint: [ 'sh', '-c', "sh /docker-entrypoint-mount.sh" ]
    healthcheck:
      test: [ 'CMD', 'curl', '-s', 'http://localhost:9200/_cluster/health?pretty' ]
      interval: 30s
      timeout: 10s
      retries: 50

  # https://www.elastic.co/guide/en/kibana/current/docker.html
  # https://www.elastic.co/guide/en/kibana/current/settings.html
  kibana:
    image: docker.elastic.co/kibana/kibana:8.14.3
    container_name: kibana
    profiles:
      - elasticsearch
    depends_on:
      - elasticsearch
    restart: always
    environment:
      XPACK_ENCRYPTEDSAVEDOBJECTS_ENCRYPTIONKEY: d1a66dfd-c4d3-4a0a-8290-2abcb83ab3aa
      NO_PROXY: localhost,127.0.0.1,elasticsearch,kibana
      XPACK_SECURITY_ENABLED: 'true'
      XPACK_SECURITY_ENROLLMENT_ENABLED: 'false'
      XPACK_SECURITY_HTTP_SSL_ENABLED: 'false'
      XPACK_FLEET_ISAIRGAPPED: 'true'
      I18N_LOCALE: zh-CN
      SERVER_PORT: '5601'
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
    ports:
      - $KIBANA_PORT:5601
    healthcheck:
      test: [ 'CMD-SHELL', 'curl -s http://localhost:5601 >/dev/null || exit 1' ]
      interval: 30s
      timeout: 10s
      retries: 3

  # unstructured .
  # (if used, you need to set ETL_TYPE to Unstructured in the api & worker service.)
  unstructured:
    image: downloads.unstructured.io/unstructured-io/unstructured-api:latest
    profiles:
      - unstructured
    restart: always
    volumes:
      - ./volumes/unstructured:/app/data

networks:
  # create a network between sandbox, api and ssrf_proxy, and can not access outside.
  ssrf_proxy_network:
    driver: bridge
    internal: true
  milvus:
    driver: bridge
  opensearch-net:
    driver: bridge
    internal: true

volumes:
  oradata:
  dify_es01_data:
